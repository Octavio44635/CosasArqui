9.crear una estructura arbol que le permita al usuario cargar numeros hasta que cargue un negativo
No termino de entender, pero asumo que el arbol no tiene negativos
Lo vamos a ordenar como si fuera un arbol binario de busqueda


<prototipo>
	
	mov al, 0x2
	mov cl, 1
	mov ch, 4
ciclo:
	sys 2
	cmp [edx], 0
	JN fin
	
	push btn_size
	call alloc; devuelve en eax la direccion al nodo nuevo
	add sp, 4
	mov [eax+valor], [edx]
	
	push eax; nodo*
	push <nodo**>; puntero al primer nodo o espacio de memoria
	call agregaNodo
	add sp, 8
	JMP ciclo
-------------------------
agregaNodo:
	push bp 
	mov bp, sp 
	
	push eax; nodoNuevo
	mov eax, [bp+12]
	
	push ebx;raiz
	mov ebx,[bp+8]

	push ecx;nodo raiz
	mov ecx, [ebx]

	cmp [ebx+valor], [eax+valor]
	JP Izquierda
	JNN derecha;no se que hacer si el valor es igual al del nodo

izquierda:
	push eax
	push [ebx+izquierda]
	call agregaNodo
	JMP fin
derecha:
	push eax
	push [ebx+derecha]
	call agregaNodo
	JMP fin
fin:
	pop ecx
	pop ebx
	pop eax
	mov sp,bp
	pop bp
	
	ret
######################
e. solicitar un numero e informar si el mismo se encuentra o no en el arbol

true equ "El numero se encuentra"
false equ "El numero no se encuentra"
<prototipo>
mov al, 0x2
mov cl, 1
mov ch, 4
sys 2
	
push [edx]; numero
push <nodo**>; puntero al primer nodo o espacio de memoria
call SolicitaNumero
add sp, 8
---------------------

SolicitaNumero:
	push bp
	mov bp, sp

	push ebx; raiz
	mov ebx, [bp+8]

	push ecx; nodo
	mov ecx, ebx
	-
	cmp ecx, null
	JZ finF
	
	cmp [ecx+valor], [bp+12]
	JZ finT
	JNZ recu
recu:
	push [bp+8]
	push [ecx+der]
	call SolicitaNumero
	add sp, 8

	push [bp+8]
	push [ecx+izq]
	call SolicitaNumero
	add sp, 8
	JMP finF
	
finT:
	OR eax, 1
	JMP fin; al pedo este
finF: 
	OR eax, 0
	
fin:
	pop ecx
	pop ebx
	mov sp, bp
	pop bp
	
	ret
#######################
<prototipo>
mov eax, 0
push<nodo**>
call cantNiveles; devuelve en eax un entero
add sp, 4



-----------------------
cantNiveles:
	push bp
	mov bp, sp
	
	push ebx; raiz
	push ecx; nodo raiz
	push eex
	
	cmp ebx, null
	JZ fin
	mov ecx, [ebx]

	push [ecx+der]
	call SolicitaNumero
	add sp, 4
	mov eex, eax

	push [ecx+izq]
	call SolicitaNumero
	add sp, 4
	cmp eax, eex
	JP mayorIzq
	JNP mayorDer
MayorDer:
	mov eax, eex
MayorIzq:
	add eax, 1
fin:
	pop eex
	pop ecx
	pop ebx
	mov sp,bp
	pop bp
	
	ret
	
	
	
	

	
	