                int equ 4
_start:         CALL main
                

function1:      PUSH bp
                MOV bp, sp
                PUSH ebx   
                PUSH ecx  
                PUSH edx           

                SUB sp, 8   ; guardo espacio para s e i
                
                MOV ebx, [bp + 8]    ; v[0]
                MOV ecx, [bp + 12]   ; z

                MOV [ebx], 1    ; v[0] = 1

                MOV [bp - 8], 1       ; i = 1

loop:		CMP [bp - 8], ecx
                JZ afuera

                MOV edx, ebx
                ADD edx, [bp - 8]
                
                MOV [edx], [edx - 1]  ; v[i] = v[i - 1]
                MUL [edx], [bp - 8]   ; v[i] = v[i] * i

                ADD [bp - 8], 1
                JMP loop

afuera:         MOV eax, bp
                ADD eax, 12

                PUSH eax    ; &z
                PUSH ebx
                CALL sum
                ADD sp, 8
                ; devuelve en eax resultado

                MOV [bp - 4], eax

                PUSH [bp - 4]
                CALL print_int
                ADD sp, 4

                POP edx
                POP ecx
                POP ebx
                MOV sp, bp
                POP bp
                RET
 ----------------------------------------------------------------------

sum:            PUSH bp
                MOV bp, sp
                PUSH ebx
                PUSH ecx
                PUSH edx    ; i  
                PUSH eex
       
                SUB sp, 4   ; s
              
                MOV ebx, [bp + 8]    ; v[0]
                MOV ecx, [bp + 12]   ; *n

                MOV [bp - 4], 0  ; s= 0

                MOV edx, 0
loop:           CMP edx, [ecx]
                JZ sumf

                MOV eex, ebx
                ADD eex, edx
                ADD [bp - 4], [eex]    ; s = s + v[i] 
                
                ADD edx, 1
                JMP loop

sumf:           MOV eax, [bp - 4]
                POP eex
                POP edx
                POP ecx
                POP ebx
                MOV sp, bp
                POP bp
                RET

-----------------------------------------------------------------------
main:           PUSH bp 
                MOV bp, sp
                PUSH eax
                
                PUSH int
                CALL alloc
                ADD sp, 4
                ; devuelve el eax el puntero

                ADD sp, 4
                MOV [bp - 4], eax

                MOV eax, int
                MUL eax, 100

                PUSH eax
                CALL alloc
                ADD sp, 4
                ; devuelve en eax el putnero

                ADD sp, 4
                MOV [bp + 8], eax

                MOV [bp + 4], 100

                PUSH [bp + 4]
                PUSH [bp + 8]
                CALL function1
                ADD sp, 8

                STOP
                
